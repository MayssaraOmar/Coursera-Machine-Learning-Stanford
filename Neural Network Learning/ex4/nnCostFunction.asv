function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% number of training examples
m = size(X, 1);

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
% computed in ex4.m

% forward Prob
a1 = [ones(m,1) X];
z2 = a1*Theta1'; %m*hidden_layer
a2 = [ones(m,1) sigmoid(z2)];
z3 = a2*Theta2'; %m*ouptut_layer
a3 = [sigmoid(z3)];

% get cost function
% map the output vector (y) into a binary vector of 1's and 0's to be used with the neural network cost function.
Y = zeros(size(a3));
for i = 1:m
    Y(i, y(i,1)) = 1; % put one at the corresponding label
end
J =  (1/m)*sum(sum(-Y.*log(a3)-(1-Y).*log(1-a3)));
% regularization
J = J + (lambda/(2*m))*(sum(sum(Theta1(:, 2:end).^2)) + sum(sum(Theta2(:, 2:end).^2)));
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively.
%


% back prob
delta3 = a3 - Y; %m*output_layer 
delta2 = (delta3*Theta2(:,2:end)) .* sigmoidGradient(z2); %m*hidden_layer
Theta1_grad = zeros(size(Theta1)); %hidden_layer*input
Delta2 = delta2'*a1; %hidden_layer*m * m*input = hidden_layer*input
Theta1_grad = Delta2/m + (lambda/m)*[zeros(hidden_layer_size, 1) Theta1(:, 2:end)];
Theta2_grad = zeros(size(Theta2)); %output_layer*hidden_layer 
Delta3 = delta3'*a2; %output_layer*m * m*hidden_layer = output_layer*hidden_layer
Theta2_grad = Delta3/m + (lambda/m)*[zeros(num_labels, 1) Theta2(:, 2:end)];

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];

end
